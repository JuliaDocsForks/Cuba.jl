using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libcuba"], :libcuba),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/giordano/CubaBuilder/releases/download/v4.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/Cuba.aarch64-linux-gnu.tar.gz", "772323d3f2f43e92cefa01af4a337774c6ebcfb7bb46afb7bc93ab2c9200ae97"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Cuba.arm-linux-gnueabihf.tar.gz", "a8c832eb4cf38a635c8369533f363ede921502eb200f38df06cd676317d95080"),
    Linux(:i686, :glibc) => ("$bin_prefix/Cuba.i686-linux-gnu.tar.gz", "c3862f5f47b95e71ab69610f31fde68fc6364d497dc09c524bc4870a7ced02cf"),
    Windows(:i686) => ("$bin_prefix/Cuba.i686-w64-mingw32.tar.gz", "b9b50e405f902c46915717346f0def4b88756a71dd62d481b84c5bd018ced020"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/Cuba.powerpc64le-linux-gnu.tar.gz", "2078fac460573f9a9a2e22a30f7989eff1cb3a55b178716e8a22ef46050c5516"),
    MacOS(:x86_64) => ("$bin_prefix/Cuba.x86_64-apple-darwin14.tar.gz", "792f5a845b819fd443930744c824f03e075f868d05815b402a2f574fd619dfd4"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/Cuba.x86_64-linux-gnu.tar.gz", "a4db25aace76e79cff8ddaa6194552a188ed5cbde1fb05c3ba0b4f5e54c37920"),
    Windows(:x86_64) => ("$bin_prefix/Cuba.x86_64-w64-mingw32.tar.gz", "eb36a3e490f681e8b8e5c10f7123932989ef65e7e126c9c1add71a93e9117a44"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
